
#Область Методы

Функция GoogleПолучение(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Демонстрационный сервис интеграции 1C c Google Assistant'"));
	Возврат Ответ;
	
КонецФункции

Функция GoogleОбработка(Запрос)
	
	token = Запрос.Заголовки.Получить("base-1c-token");
	Данные = ЗначениеИзJSONСтроки(Запрос.ПолучитьТелоКакСтроку());
	
	Если Не token = Константы.DialogBase1CToken.Получить() Тогда
		Ответ = Новый HTTPСервисОтвет(403);
		Возврат Ответ;
	КонецЕсли;
	
	Если Не ДанныеОбработкиКорректны(Данные) Тогда
		Ответ = Новый HTTPСервисОтвет(502);
		Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Переданы недопустимые данные!'"));
		Возврат Ответ;
	КонецЕсли;
	
	Пользователь = Пользователь(Данные);
	Если Не GoogleОбработкаРазрешена(Пользователь, Данные) Тогда
		Ответ = Новый HTTPСервисОтвет(403);
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		Ответ = Новый HTTPСервисОтвет(200);
		ТекстОтвета = ОбработатьДействие(Пользователь, Данные);
		ДанныеОтвета = Новый Структура("text, updatedSession", ТекстОтвета, Данные.session);
		Ответ.УстановитьТелоИзСтроки(СтрокаJSONИзЗначения(ДанныеОтвета));
		Возврат Ответ;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("HTTPСервис_Dialog",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.HTTPСервисы.Dialog,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Произошла внутренняя ошибка сервера!'"));
		Возврат Ответ;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область Обработка

Функция ДанныеОбработкиКорректны(Данные)
	
	Возврат СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Данные.intent, Ложь, "_")
		И ТипЗнч(Данные.payload) = Тип("Структура")
		И ТипЗнч(Данные.params) = Тип("Структура")
		И ТипЗнч(Данные.session) = Тип("Структура");
	
КонецФункции

Функция GoogleОбработкаРазрешена(Пользователь, Данные)
	
	intent = Данные.intent;
	source = Данные.source;
	
	GoogleОбработкаРазрешена = Ложь;
	
	Если source = "Dialogflow" И Не ЗначениеЗаполнено(Пользователь) Тогда // Тестирование агента из саомго Dialogflow CX.
		GoogleОбработкаРазрешена = Истина;
	КонецЕсли;
	Если Пользователь.DialogДоступ = Перечисления.DialogДоступы.Разрешено Тогда
		GoogleОбработкаРазрешена = Истина;
	КонецЕсли;
	Если intent = "create_user" Тогда
		GoogleОбработкаРазрешена = Истина;
	КонецЕсли;
	
	Возврат GoogleОбработкаРазрешена;
	
КонецФункции


Функция ОбработатьДействие(Пользователь, Данные)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОтвета = "";
	
	Код =
	"ТекстОтвета = %1(Пользователь, Данные);";
	Код = СтрШаблон(Код, Данные.intent);
	Выполнить(Код);
	
	Возврат ТекстОтвета;
	
КонецФункции

Функция create_user(Пользователь, Данные)
	
	payload = Данные.payload;
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		
		об = Справочники.Пользователи.СоздатьЭлемент();
		об.Код = payload.email;
		об.Наименование = payload.name;
		об.DialogID = payload.email;
		об.DialogДоступ = Перечисления.DialogДоступы.Запрещено;
		об.Записать();
		
		Пользователь = об.Ссылка;
		
	КонецЕсли;
	
	Возврат СтрШаблон("Пользователь %1 добавлен в систему!", Пользователь);
	
КонецФункции

Функция request(Пользователь, Данные)
	
	Тема = ЗначениеИзПараметровИлиСессии(Данные, "topic");
	DateTime = ЗначениеИзПараметровИлиСессии(Данные, "date");
	user = ЗначениеИзПараметровИлиСессии(Данные, "user");
	
	Если ЗначениеЗаполнено(DateTime) Тогда
		Дата = ДатаИзDateTime(DateTime);
	Иначе
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Тема = "money" Тогда
		Сумма = ДеньГода(Дата);
		ТекстОтвета = СтрШаблон("В кассе на %1 %2 рублей.", Формат(Дата, "ДФ='dd MMMM yyyy'"), Сумма);
	ИначеЕсли Тема = "store" Тогда
		Сумма = ДеньГода(Дата) + Год(Дата);
		ТекстОтвета = СтрШаблон("На складе на %1 размещено товаров на %2 рублей.", Формат(Дата, "ДФ='dd MMMM yyyy'"), Сумма);
	ИначеЕсли Тема = "copy" Тогда
		Если Не ЗначениеЗаполнено(user) Или user = "i" Тогда
			ПользовательБазы = Пользователь;
		Иначе
			ПользовательБазы = РегистрыСведений.DialogDemoUsers.Пользователь(user);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПользовательБазы) Тогда
			ТекстОтвета = "Не удалось найти пользователя для копированя.";
		Иначе
			ИмяБазы = РегистрыСведений.DialogDemoБазы.ИмяБазы(ПользовательБазы);
			Если ЗначениеЗаполнено(ИмяБазы) Тогда
				ТекстОтвета = СтрШаблон("Копирую рабочую базу в тестовую %1.", ИмяБазы);
			Иначе
				ТекстОтвета = СтрШаблон("Для пользователя %1 на задана база.", ПользовательБазы);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстОтвета = "Повторите пожалуйста вопрос по другому.";
	КонецЕсли;
	
	СохранитьПараметрыВСессии(Данные, , "user");
	
	Возврат ТекстОтвета;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция Пользователь(Данные)
	
	payload = Данные.payload;
	
	Если payload.Свойство("email") Тогда
		Пользователь = Справочники.Пользователи.Пользователь(payload.email);
	Иначе
		Пользователь = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	Возврат Пользователь;
	
КонецФункции

Функция ЗначениеИзПараметровИлиСессии(Данные, ИмяПараметра, ЗначениеПоУмолчанию = Неопределено)
	
	params = Данные.params;
	session = Данные.session;
	
	Если params.Свойство(ИмяПараметра) Тогда
		Значение = ЗначениеПараметра(Данные.params[ИмяПараметра]);
	ИначеЕсли session.Свойство(ИмяПараметра) Тогда
		Значение = ЗначениеПараметра(Данные.session[ИмяПараметра]);
	Иначе
		Значение = ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЗначениеПараметра(Параметр)
	
	Если Параметр.Свойство("resolvedValue") Тогда
		Возврат Параметр.resolvedValue;
	Иначе
		Возврат Параметр.resolved;
	КонецЕсли;
	
КонецФункции

Функция ДатаИзDateTime(DateTime)
	
	Возврат Дата(DateTime.year, DateTime.month, DateTime.day);
	
КонецФункции

Процедура СохранитьПараметрыВСессии(Данные, СписокСвойств = "", ИсключаяСвойства = "")
	
	params = Данные.params;
	session = Данные.session;
	
	ОтбиратьДопустимыеКлючи = ЗначениеЗаполнено(СписокСвойств);
	ДопустимыеКлючи = СтрРазделить(СписокСвойств, ",");
	КлючиИсключений = СтрРазделить(ИсключаяСвойства, ",");
	
	Для Каждого Элемент Из params Цикл
		
		Если ОтбиратьДопустимыеКлючи
			И ДопустимыеКлючи.Найти(Элемент.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не КлючиИсключений.Найти(Элемент.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		session.Вставить(Элемент.Ключ, Элемент.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
